/*
 * @name Grid breakpoints
 * @type SASS Map
 * @description Define the minimum dimensions at which your layout will change,
 * adapting to different screen sizes, for use in media queries.
 */
/*
 * @name _rmq_assert-ascending
 * @type SASS MIXINS
 * @description Ensure the values in the objects are in ascending order
 */
/*
 * @name rmq_breakpoint-next
 * @type SASS FUNCTION
 * @description Breakpoint viewport sizes and media queries.
 *  Breakpoints are defined as a map of (name: minimum width), order from small to large:
 *  The map defined in the `$rmq_breakpoints` global variable is used as the `$breakpoints` argument by default.
 * @example
 *  (xs: 0, sm: 544px, md: 768px)
 *  Name of the next breakpoint, or null for the last breakpoint.
 *  rmq_breakpoint-next(sm) >> md
 *  rmq_breakpoint-next(sm, (xs: 0, sm: 544px, md: 768px)) >> md
 *  rmq_breakpoint-next(sm, $breakpoint-names: (xs sm md)) >> md
 */
/*
 * @name rmq_breakpoint-min
 * @type SASS MIXINS
 * @description Minimum breakpoint width. Null for the smallest (first) breakpoint.
 * @example
 *  rmq_breakpoint-min(sm, (xs: 0, sm: 544px, md: 768px)) >> 544px
 */
/*
 * @name rmq_breakpoint-max
 * @type SASS MIXINS
 * @description Maximum breakpoint width. Null for the largest (last) breakpoint.
 * @example
 *   The maximum value is calculated as the minimum of the next one less 0.1.
 *   rmq_breakpoint-max(sm, (xs: 0, sm: 544px, md: 768px)) >> 767px
 */
/*
 * @name rmq_media-breakpoint-up
 * @type SASS MIXINS
 * @description Maximum breakpoint width. Null for the largest (last) breakpoint.
 * @example
 *   The maximum value is calculated as the minimum of the next one less 0.1.
 *   rmq_breakpoint-max(sm, (xs: 0, sm: 544px, md: 768px)) >> 767px
 */
/*
 * @name rmq_media-breakpoint-down
 * @type SASS MIXINS
 * @description Media of at most the maximum breakpoint width. No query for the largest breakpoint.
 *   Makes the @content apply to the given breakpoint and narrower.
 */
/*
 * @name rmq_media-breakpoint-only
 * @type SASS MIXINS
 * @description Media between the breakpoint's minimum and maximum widths.
 *  No minimum for the smallest breakpoint, and no maximum for the largest one.
 *  Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
 */
/*
 * @name rmq_media-breakpoint-between
 * @type SASS MIXINS
 * @description Media that spans multiple breakpoint widths.
 *  Makes the @content apply between the min and max breakpoints
 */
/*
 * @name rmq_to-rem
 * @description Converts a pixel value to matching rem value. *Any* value passed, regardless of unit.
 * @param {Number} $value - Pixel value to convert.
 * @param {Number} $base [null] - Base for pixel conversion.
 * @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
 */
/*
 * @name rmq_strip-unit
 * @description Removes the unit (e.g. px, em, rem) from a value, returning the number only.
 * @param {Number} $num - Number to strip unit from.
 * @returns {Number} The same number, sans unit.
 */
/*
 * @name rmq_rem-calc
 * @description Converts one or more pixel values into matching rem values.
 * @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
 * @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$base-font-size` variable as the base.
 * @returns {List} A list of converted values.
 */
/*
 * @name rmq_bp-to-em
 * @description Converts a unitless, pixel, or rem value to em, for use in breakpoints.
 */
/*
 * @name rmq_breakpoint
 * @description Generates a media query string matching the input value.
 * @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.
 */
/*
 * @name rmq_breakpoint
 * @description Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values
 * @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.
 * @output If the breakpoint is "0px and larger", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.
 * @notes
 * - If a string is passed, the mixin will look for it in the `$rmq_breakpoints` map, and use a media query there.
 * - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.
 * - If a rem value is passed, the unit will be changed to em.
 * - If an em value is passed, the value will be used as-is.
 */
/*
 * @name rmq_map-next
 * @description Find the next key in a map.
 * @param {Map} $map - Map to traverse.
 * @param {Mixed} $key - Key to use as a starting point.
 * @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.
 */
/*
 * @name rmq_above
 */
/********************************** Devices ***********************************/
/*
 * @name rmq_aspect-ratio-iphone5-up
 */
/*
 * @name rmq_aspect-ratio-iphone5
 */
/*
 * @name rmq_aspect-ratio-iphone6
 */
/*
 * @name rmq_aspect-ratio-iphone6plus
 */
/*
 * @name rmq_aspect-ratio-iphone6plus
 */
/*
 * @name rmq_tv
 */
/*
 * @name rmq_desktop
 */
/*
 * @name rmq_tablet
 */
/*
 * @name rmq_mobile
 */
/********************************** Responsive visibility utilities ***********************************/
/*
 * @name Generator
 * @description Create classes
 */
.rmq_hidden-xs-below {
  display: none !important; }

@media (max-width: 543px) {
  .rmq_hidden-xs-above {
    display: none !important; } }

@media (min-width: 544px) {
  .rmq_hidden-sm-below {
    display: none !important; } }

@media (max-width: 767px) {
  .rmq_hidden-sm-above {
    display: none !important; } }

@media (min-width: 768px) {
  .rmq_hidden-md-below {
    display: none !important; } }

@media (max-width: 991px) {
  .rmq_hidden-md-above {
    display: none !important; } }

@media (min-width: 992px) {
  .rmq_hidden-lg-below {
    display: none !important; } }

@media (max-width: 1199px) {
  .rmq_hidden-lg-above {
    display: none !important; } }

@media (min-width: 1200px) {
  .rmq_hidden-xl-below {
    display: none !important; } }

@media (max-width: 1439px) {
  .rmq_hidden-xl-above {
    display: none !important; } }

@media (min-width: 1440px) {
  .rmq_hidden-xxl-below {
    display: none !important; } }

.rmq_hidden-xxl-above {
  display: none !important; }

@media only screen and (min-device-width: 360px) and (max-device-width: 640px) {
  .rmq_samsung_galaxy_s5 {
    display: block !important; } }

@media only screen and (-webkit-device-pixel-ratio: 3) and (min-device-width: 360px) and (max-device-height: 640px) and (orientation: landscape) {
  .rmq_samsung_galaxy_s5-landscape {
    display: block !important; } }

@media only screen and (-webkit-device-pixel-ratio: 3) and (min-device-width: 360px) and (max-device-height: 640px) and (orientation: portrait) {
  .rmq_samsung_galaxy_s5-portrait {
    display: block !important; } }

@media only screen and (min-device-width: 320px) and (max-device-width: 640px) {
  .rmq_samsung_galaxy_s4 {
    display: block !important; } }

@media only screen and (-webkit-device-pixel-ratio: 3) and (min-device-width: 320px) and (max-device-height: 640px) and (orientation: landscape) {
  .rmq_samsung_galaxy_s4-landscape {
    display: block !important; } }

@media only screen and (-webkit-device-pixel-ratio: 3) and (min-device-width: 320px) and (max-device-height: 640px) and (orientation: portrait) {
  .rmq_samsung_galaxy_s4-portrait {
    display: block !important; } }

@media only screen and (min-device-width: 320px) and (max-device-width: 640px) {
  .rmq_samsung_galaxy_s3 {
    display: block !important; } }

@media only screen and (-webkit-device-pixel-ratio: 3) and (min-device-width: 320px) and (max-device-height: 640px) and (orientation: landscape) {
  .rmq_samsung_galaxy_s3-landscape {
    display: block !important; } }

@media only screen and (-webkit-device-pixel-ratio: 3) and (min-device-width: 320px) and (max-device-height: 640px) and (orientation: portrait) {
  .rmq_samsung_galaxy_s3-portrait {
    display: block !important; } }

@media only screen and (min-device-width: 375px) and (max-device-width: 667px) {
  .rmq_iphone6 {
    display: block !important; } }

@media only screen and (-webkit-device-pixel-ratio: 2) and (min-device-width: 375px) and (max-device-height: 667px) and (orientation: landscape) {
  .rmq_iphone6-landscape {
    display: block !important; } }

@media only screen and (-webkit-device-pixel-ratio: 2) and (min-device-width: 375px) and (max-device-height: 667px) and (orientation: portrait) {
  .rmq_iphone6-portrait {
    display: block !important; } }

@media only screen and (min-device-width: 414px) and (max-device-width: 736px) {
  .rmq_iphone6plus {
    display: block !important; } }

@media only screen and (-webkit-device-pixel-ratio: 2) and (min-device-width: 414px) and (max-device-height: 736px) and (orientation: landscape) {
  .rmq_iphone6plus-landscape {
    display: block !important; } }

@media only screen and (-webkit-device-pixel-ratio: 2) and (min-device-width: 414px) and (max-device-height: 736px) and (orientation: portrait) {
  .rmq_iphone6plus-portrait {
    display: block !important; } }

@media only screen and (min-device-width: 320px) and (max-device-width: 568px) {
  .rmq_iphone5 {
    display: block !important; } }

@media only screen and (-webkit-device-pixel-ratio: 2) and (min-device-width: 320px) and (max-device-height: 568px) and (orientation: landscape) {
  .rmq_iphone5-landscape {
    display: block !important; } }

@media only screen and (-webkit-device-pixel-ratio: 2) and (min-device-width: 320px) and (max-device-height: 568px) and (orientation: portrait) {
  .rmq_iphone5-portrait {
    display: block !important; } }

@media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
  .rmq_iphone4 {
    display: block !important; } }

@media only screen and (-webkit-min-device-pixel-ratio: 2) and (min-device-width: 320px) and (max-device-height: 480px) and (orientation: landscape) {
  .rmq_iphone4-landscape {
    display: block !important; } }

@media only screen and (-webkit-min-device-pixel-ratio: 2) and (min-device-width: 320px) and (max-device-height: 480px) and (orientation: portrait) {
  .rmq_iphone4-portrait {
    display: block !important; } }

@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {
  .rmq_iphone3 {
    display: block !important; } }

@media only screen and (-webkit-min-device-pixel-ratio: 2) and (min-device-width: 768px) and (max-device-height: 1024px) and (orientation: landscape) {
  .rmq_iphone3-landscape {
    display: block !important; } }

@media only screen and (-webkit-min-device-pixel-ratio: 2) and (min-device-width: 768px) and (max-device-height: 1024px) and (orientation: portrait) {
  .rmq_iphone3-portrait {
    display: block !important; } }

@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {
  .rmq_ipad {
    display: block !important; } }

@media only screen and (min-device-width: 768px) and (max-device-height: 1024px) and (orientation: landscape) {
  .rmq_ipad-landscape {
    display: block !important; } }

@media only screen and (min-device-width: 768px) and (max-device-height: 1024px) and (orientation: portrait) {
  .rmq_ipad-portrait {
    display: block !important; } }

/*
 * @name invisible
 * @description Make element invisible but still affect margin & padding
 */
.rmq_invisible {
  visibility: hidden !important; }

/*
 * @name Print Block
 * @description Media queries are placed on the inside to be mixin-friendly.
 */
.rmq_visible-print-block {
  display: none !important; }
  @media print {
    .rmq_visible-print-block {
      display: block !important; } }

/*
 * @name Print visible inline
 * @description Media queries are placed on the inside to be mixin-friendly.
 */
.rmq_visible-print-inline {
  display: none !important; }
  @media print {
    .rmq_visible-print-inline {
      display: inline !important; } }

/*
 * @name Print visible inline-block
 * @description Media queries are placed on the inside to be mixin-friendly.
 */
.rmq_visible-print-inline-block {
  display: none !important; }
  @media print {
    .rmq_visible-print-inline-block {
      display: inline-block !important; } }

/*
 * @name Print Hide
 * @description Media queries are placed on the inside to be mixin-friendly.
 */
@media print {
  .rmq_hidden-print {
    display: none !important; } }

@media screen and (orientation: landscape) {
  .element-landscape {
    display: block; } }

@media screen and (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  .element-retina {
    display: block; } }

@media screen and (min-width: 20em) {
  .element-320px {
    display: block; } }

@media screen and (min-width: 20em) {
  .element-320 {
    display: block; } }

@media screen and (min-width: 40em) {
  .element-40rem {
    display: block; } }

@media screen and (max-width: 61.9375em) {
  .element-md-down {
    display: block; } }

@media screen and (min-width: 48em) and (max-width: 61.9375em) {
  .element-md-only {
    display: block; } }

@media screen and (min-width: 48em) {
  .element-md {
    display: block; } }
